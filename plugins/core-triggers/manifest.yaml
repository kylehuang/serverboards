id: serverboards.core.triggers
name: Core Triggers
author: David Moreno <dmoreno@serverboards.io>
version: "18.10"
description: >
  Various core triggers.
icon: puzzle piece

components:
  - name: Server is running / Ping
    description: Performs an ICMP ping to check if the server is alive.
    id: ping
    type: trigger
    traits: cloud server
    states: down up
    command: daemon
    stop: stop_trigger
    start:
      method: ping
      params:
        - name: ip
          label: Remote IP address or DNS name
          type: text
          card: true
        - name: frequency
          label: Check frequency
          description: Time between checks in seconds
          default: 60
          card: true
          class: half column
        - name: grace
          label: Grace period
          description: Seconds that connectivity can be lost without triggering
          default: 60
          class: half column
    traits: ip

  - name: HTTP Response time limit
    description: |
      Checks periodically if the connection time to the given server
      enters into an allowed range.
    id: http
    type: trigger
    command: daemon
    traits: www cloud
    states: down up
    stop: stop_trigger
    start:
      method: http
      params:
        - name: url
          label: Remote URL
          type: text
          card: true
        - name: maxs
          label: Maximum response time (s)
          description: Trigger if response time is greater than the given value in seconds for longer that grace period.
          default: 5
          class: half column
        - name: frequency
          label: Check frequency (s)
          description: Time between checks in seconds
          default: 60
          card: true
          class: half column
        - name: grace
          label: Grace period (s)
          description: Seconds that connectivity can be lost without triggering
          default: 60
          class: half column

  - name: Socket is receiving connections
    description: Checks periodically the given server and port connectivity.
    id: socket.is_up
    type: trigger
    states: down up
    command: daemon
    traits: server url
    stop: stop_trigger
    start:
      method: socket_is_up
      params:
        - name: url
          label: URL
          type: text
          description: Full URL of the resource
          placeholder: http://example.com, https://google.com, smtp://mail.com:25, ...
          card: true
        - name: frequency
          label: Check frequency
          description: Time between checks in seconds
          placeholder: 60s
          default: 60
          card: true
          class: half column
        - name: grace
          label: Grace period
          description: Seconds that connectivity can be lost without triggering
          placeholder: 60s
          default: 60
          class: half column
    stop:
      method: stop_trigger
    result:
      state: Connection state
      for: Time elapsed since last change
    traits: url

  - name: Periodic trigger
    description: |
      Periodically triggers. Used for recurring actions without a very
      strict schedule.
    id: periodic
    type: trigger
    states: tick
    command: daemon
    start:
      method: periodic
      params:
        - name: timeout
          label: Trigger every
          description: "Write human time description: 1d, 12h, 30m, 10s"
          card: true
          class: half column

  - name: Service tags changed
    description: Triggers when a specific tag appears or disappears from service tags, as UP or DOWN
    id: tag_change
    type: trigger
    states: added removed
    command: daemon
    traits: service
    start:
      method: tag_change
      params:
        - name: service
          type: service
          label: Service to watch
          card: true
        - name: tag
          type: text
          label: Label
          placeholder: eg. UP, DOWN, UNKNOWN
          card: true
          class: half column
    stop: tag_change_stop

  - name: Webhook called
    type: trigger
    id: webhook
    description: |
      Will be called when the address:

        [{{BASE_URL}}/webhook/{{rule.uuid}}]({{BASE_URL}}/webhook/{{rule.uuid}})

      is externally called, with the data parameters as passed.
    start:
      params:
        - type: description
          description: Please set which values are required and optional. Any other value will be discarded.
        - name: required
          label: Required values
          description: Coma separated required values. If any missing, return error.
          card: true
        - name: optional
          label: Optional values
          description: Coma separated optional values.
          card: true
        - name: redirect_ok
          label: Redirect to this URL after trigger success
        - name: redirect_nok
          label: Redirect to this URL after trigger failure
        - name: response
          label: If no redirect, YAML style response. Will be converted to JSON.
          description: 'If empty, will just return `{"status": "success"}` or `{"status": "error"}`'
          placeholder: "ok: {{B.success}}\ndata: {{B|json}}"
          type: textarea
        - name: allowed_origins
          label: List of allowed origins.
          description: |
            One origin per line. Will be used for both allow execute the webhook
            and set the `Access-Control-Allow-Origin`.

            Only protocol and domain supported.

            Special `direct` can be used for direct traffic (CURL).
          placeholder: https://example.com
          type: textarea

    result:
      data: Object with data as sent by GET or POST query, for example `{{A.data.subject}}`
      peer: "Object with data identifying the peer: `origin`, `ip` and `port`."

  - name: Server socket is up
    description: |
      Checks every minute if the server socket is up, sets labels
      according to changes and creates an issue if not available.

      It can be used for any server type with an URL.
    id: rule.socket.is_up
    type: rule template
    traits: url server
    fields:
      - name: service
        label: Service to monitor
        type: service
        traits: url
    rule:
      when:
        trigger: socket.is_up
        params:
          frequency: 1m
          url: "{{service.url}}"
      actions: &RULE_DOWN_ISSUE
        - type: condition
          condition: (A.state == "down") and (A.for > 120)
          then:
            - type: action
              action: serverboards.core.actions/set-tags
              params:
                tags: -UP DOWN
                service: "{{service.uuid}}"
            - type: action
              action: serverboards.core.actions/open-issue
              params:
                issue: "rule/{{uuid}}"
                title: "{{service.name}} / {{service.config.url}} is DOWN"
                description: "Please check ASAP the server {{service.name}}.\n\nMore information at {{BASE_URL}}/#/services/{{service.uuid}}"
          else:
            - type: action
              action: serverboards.core.actions/set-tags
              params:
                tags: UP -DOWN
                service: "{{service.uuid}}"
            - type: action
              action: serverboards.core.actions/close-issue
              params:
                issue: "rule/{{uuid}}"
                comment: "Server is back online after {{prev.A.for}} seconds"

  - name: HTTP server is up
    description: |
      Checks every minute if the HTTP server is up, sets labels according
      to changes and creates or closes issues.

      Opens if not available for more than 2 minutes.
    id: rule.http.is_up
    type: rule template
    traits: www server
    fields:
      - name: service
        label: Service to monitor
        type: service
        traits: url www server
    rule:
      when:
        trigger: http
        params:
          frequency: 1m
          url: "{{service.config.url}}"
          id: A
      actions: *RULE_DOWN_ISSUE # downref


  - name: Core triggers daemon
    id: daemon
    type: cmd
    command: serverboards-triggers.py
    shared: none
    strategy: singleton
    perms: service.update service.info event.emit
    timeout: 7d
