#!/bin/dash

INFILE=""
INIFILE=""
DBURL=""
FORCE=""
DATADIR=""

parse_opts(){
  while test $# -gt 0; do
    case $1 in
      --force|-f)
        FORCE="true"
        ;;
      --one-line-help)
        echo "Restores a Serverboards backup"
        exit 1
        ;;
      --dburl)
        log "Set dburl to $2"
        DBURL="$2"
        shift
        ;;
      --datadir)
        log "Set datadir to $2"
        DATADIR="$2"
        shift
        ;;
      *)
        if [ ! "$INFILE" ]; then
          INFILE="$1"
        else if [ ! "$INIFILE" ]; then
          INIFILE="$1"
        else
          echo "Invalid parameter $1"
          echo
          help
        fi; fi
        ;;
    esac
    shift
  done
}

help(){
  cat <<EOF
Usage: s10s restore <backupfile.tgz> [serverboards.ini] [--force]

  backupfile       -- The backup file as generated by \`s10s backup\`. May
                      use \`-\` for stdin
  serverboards.ini -- Use this ini file as configuration to where to restore
                      data and database to use (will be created)

  --force          -- Force restoration: deletes the database if exists, and
                      removes data files. If not provided fails if database or
                      data directory exist"
  --dburl URL      -- Use this database connection url. Does not modify
                      serverboards.ini file
  --datadir path   -- Force use this data dir as data recovery path. Does not
                      modify serverboards.ini file.
EOF
  exit 1
}

cleanup(){
  rm -rf ${RTMPDIR}
}
get_config(){
  awk -F= /^$1[\ \\t]*=/' {print $2}' $INIFILE | tr -d ' '  | sed -e 's/^"//' -e 's/"$//'
}
error(){
  log $*
  exit 1
}
log(){
  >&2 echo $*
}

parse_opts $*

[ "$INFILE" ] || help

set -e
cd /tmp/

RTMPDIR=$( mktemp -d )
[ "$RTMPDIR" ] || exit 1
TMPDIR=$RTMPDIR/serverboards/
trap cleanup EXIT

### WORK

log "Uncompress from $INFILE..."
if [ "$INFILE" = "-" ]; then
  tar xz -C $RTMPDIR
else
  tar xfz $INFILE -C $RTMPDIR
fi
INIFILE=${INIFILE:-$TMPDIR/serverboards.ini}

log "Check backup is good..."
DBURL=${DBURL:-$( get_config url )}
DATADIR=${DATADIR:-$( get_config home )}
DATADIR=${DATADIR:-$HOME/.local/serverboards/}

[ "$DATADIR" ] || error "Data dir not specified nor guessed."

if [ ! "$FORCE" ]; then
  [ -e /etc/serverboards.ini ] && error "Ini file /etc/serverboards.ini already exists. Aborting."
  [ -e $DATADIR ] && error "Data directory $DATADIR already exists. Aborting."
  echo | psql $DBURL 2>/dev/null && error "Database already exists"
fi

log "Recover config..."
if [ -e /etc/serverboards.ini ]; then
  log "Copy current ini backup to $BACKUPINI"
  BACKUPINI=/etc/serverboards.$(date +%s).ini
  cp /etc/serverboards.ini $BACKUPINI
fi
cp $TMPDIR/serverboards.ini /etc/serverboards.ini

log "Recover data..."
mkdir -p $DATADIR
cp -a $TMPDIR/data $DATADIR

DBNAME=$( echo $DBURL | sed 's#^.*://.*:.*@.*/\(.*\)#\1#g' )
DBUSER=$( echo $DBURL | sed 's#^.*://\(.*\):.*@.*/.*#\1#g' )
DBPASSWD=$( echo $DBURL | sed 's#^.*://.*:\(.*\)@.*/.*#\1#g' )
DBHOST=$( echo $DBURL | sed 's#^.*://.*:.*@\(.*\)/.*#\1#g' )
[ "$DBHOST" != "localhost" ] && error "Can only restore to localhost database"

log "Recover database..."
sudo -u postgres psql <<EOF
CREATE DATABASE $DBNAME;
CREATE USER $DBUSER WITH PASSWORD '$DBPASSWD';
EOF
[ "$?" != 0 ] && error "Error creating database."
pv $TMPDIR/serverboards.sql | sudo -u postgres pg_restore -d $DBNAME || error "Error recovering database."

log "Recover data to $DATADIR"
mkdir -p $DATADIR
cp -a $TMPDIR/data $DATADIR

log "Done"
